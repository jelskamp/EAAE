cmake_minimum_required(VERSION 3.0.2)
project(agiros)

# ---------------------------------------------------
# Find catkin and any catkin packages
# ---------------------------------------------------
find_package(catkin REQUIRED COMPONENTS
  roscpp
  rospy
  std_msgs
  geometry_msgs
  nav_msgs
  tf
  gazebo_ros
  agiros_msgs
  message_generation
)

# ---------------------------------------------------
# Declare the service files to be built
# ---------------------------------------------------
add_service_files(
  FILES
  getEnergy.srv
)

# ---------------------------------------------------
# Generate messages and services
# ---------------------------------------------------
generate_messages(
  DEPENDENCIES
  std_msgs
  agiros_msgs
)

# ---------------------------------------------------
# Declare the catkin package
# ---------------------------------------------------
catkin_package(
  INCLUDE_DIRS include
  LIBRARIES ros_pilot update_uav_pose_plugin
  CATKIN_DEPENDS roscpp rospy std_msgs geometry_msgs nav_msgs tf gazebo_ros agiros_msgs message_runtime
)

# ---------------------------------------------------
# Setup build flags
# ---------------------------------------------------
if (NOT CMAKE_BUILD_TYPE)
  set(CMAKE_BUILD_TYPE "Release" CACHE STRING "" FORCE)
endif ()

if ("${CMAKE_HOST_SYSTEM_PROCESSOR}" STREQUAL "armv7l")
  set(CMAKE_CXX_ARCH_FLAGS " -Wno-psabi -march=armv7-a -mfpu=neon -mfloat-abi=hard -funsafe-math-optimizations")
elif ("${CMAKE_HOST_SYSTEM_PROCESSOR}" STREQUAL "aarch64")
  set(CMAKE_CXX_ARCH_FLAGS " -march=armv8-a+crypto -mcpu=cortex-a57+crypto")
elseif (NOT DEFINED CATKIN_DEVEL_PREFIX)
  set(CMAKE_CXX_ARCH_FLAGS " -march=native")
endif ()

set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++17 -DEIGEN_STACK_ALLOCATION_LIMIT=1048576")
set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS} ${CMAKE_CXX_ARCH_FLAGS} -O3 -DNDEBUG")
set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS} -g")

# ---------------------------------------------------
# Include directories
# ---------------------------------------------------
include_directories(
  include
  ${catkin_INCLUDE_DIRS}
  ${GAZEBO_INCLUDE_DIRS}
)

# ---------------------------------------------------
# ros_pilot library
# ---------------------------------------------------
add_library(ros_pilot
  src/ros_pilot.cpp
  src/ros_traj_visualizer.cpp
  src/bridge/rotors_bridge.cpp
  src/bridge/ros_bridge.cpp
  src/ctrl_feedback_publisher.cpp
)
target_link_libraries(ros_pilot ${catkin_LIBRARIES})
add_dependencies(ros_pilot ${${PROJECT_NAME}_EXPORTED_TARGETS} ${catkin_EXPORTED_TARGETS})

# ---------------------------------------------------
# Executables
# ---------------------------------------------------
add_executable(${PROJECT_NAME}_node src/node.cpp)
target_link_libraries(${PROJECT_NAME}_node ros_pilot)

add_executable(agisim_node src/agisim_node.cpp)
target_link_libraries(agisim_node ros_pilot)

add_executable(ros_to_laird_bridge src/ros_to_laird_bridge.cpp)
target_link_libraries(ros_to_laird_bridge ros_pilot)

add_executable(ros_to_msp_bridge src/ros_to_msp_bridge.cpp)
target_link_libraries(ros_to_msp_bridge ros_pilot)

add_executable(laird_to_sbus_bridge src/laird_to_sbus_bridge.cpp)
target_link_libraries(laird_to_sbus_bridge ros_pilot)

add_executable(laird_to_ctrl_bridge src/laird_to_ctrl_bridge.cpp)
target_link_libraries(laird_to_ctrl_bridge ros_pilot)

add_executable(ros_to_ctrl_bridge src/ros_to_ctrl_bridge.cpp)
target_link_libraries(ros_to_ctrl_bridge ros_pilot)

add_executable(mock_vio src/mockvio_node.cpp)
target_link_libraries(mock_vio ros_pilot)

add_executable(uav_tf_broadcast src/uav_tf_broadcast.cpp)
target_link_libraries(uav_tf_broadcast ${catkin_LIBRARIES})

add_executable(odom_publisher_for_ego src/odom_publisher_for_ego.cpp)
target_link_libraries(odom_publisher_for_ego ${catkin_LIBRARIES})

add_executable(energy_estimator_node_service src/energy_estimator.cpp)
target_link_libraries(energy_estimator_node_service ros_pilot)

# ---------------------------------------------------
# Gazebo plugin
# ---------------------------------------------------
add_library(update_uav_pose_plugin src/update_uav_pose_plugin.cpp)
target_link_libraries(update_uav_pose_plugin ${GAZEBO_LIBRARIES} ${catkin_LIBRARIES})
add_dependencies(update_uav_pose_plugin ${catkin_EXPORTED_TARGETS})

# ---------------------------------------------------
# Install targets
# ---------------------------------------------------
install(TARGETS
  ros_pilot
  ${PROJECT_NAME}_node
  agisim_node
  ros_to_laird_bridge
  ros_to_msp_bridge
  laird_to_sbus_bridge
  laird_to_ctrl_bridge
  ros_to_ctrl_bridge
  mock_vio
  odom_publisher_for_ego
  uav_tf_broadcast
  energy_estimator_node_service
  update_uav_pose_plugin
  ARCHIVE DESTINATION ${CATKIN_PACKAGE_LIB_DESTINATION}
  LIBRARY DESTINATION ${CATKIN_PACKAGE_LIB_DESTINATION}
  RUNTIME DESTINATION ${CATKIN_PACKAGE_BIN_DESTINATION}
)

install(DIRECTORY include/
  DESTINATION ${CATKIN_PACKAGE_INCLUDE_DESTINATION}
)
