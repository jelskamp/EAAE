#include <ros/ros.h>
#include <octomap_msgs/Octomap.h>
#include <octomap_msgs/conversions.h>
#include <octomap/OcTree.h>
#include <visualization_msgs/MarkerArray.h>
#include <vector>
#include <geometry_msgs/Point.h>
#include <cmath>
#include <algorithm>




class FrontierDetector {
private:
    ros::NodeHandle nh;
    ros::Subscriber octomap_sub;
    ros::Publisher frontier_pub;
    ros::Publisher frontier_pub2;
    double resolution;
    // std::shared_ptr<octomap::OcTree> latest_octree;
    
public:
    FrontierDetector() {

        // CONT. SUBSCRIBER (WORKS)
        octomap_sub = nh.subscribe("/octomap_binary", 1, &FrontierDetector::octomapCallback, this);

        frontier_pub = nh.advertise<visualization_msgs::MarkerArray>("/frontier_markers", 1);
        frontier_pub2 = nh.advertise<visualization_msgs::MarkerArray>("/frontier_markers_all", 1);
    }


    void octomapCallback(const octomap_msgs::Octomap::ConstPtr& msg) {
        std::shared_ptr<octomap::OcTree> octree(dynamic_cast<octomap::OcTree*>(octomap_msgs::binaryMsgToMap(*msg)));
        if (!octree) {
            ROS_ERROR("Failed to convert octomap message to OcTree.");
            return;
        }
        resolution = octree->getResolution();

        detectFrontiers(octree);
    }



    void detectFrontiers(std::shared_ptr<octomap::OcTree> octree) {
        std::vector<geometry_msgs::Point> frontiers;
        
        // frontiers.clear();


        for (octomap::OcTree::leaf_iterator it = octree->begin_leafs(), end = octree->end_leafs(); it != end; ++it) {
            if (octree->isNodeOccupied(*it)) continue; // Ignore occupied nodes
            
            octomap::point3d node_coord = it.getCoordinate();
            if (isFrontier(octree, node_coord)) {
                geometry_msgs::Point p;
                p.x = node_coord.x();
                p.y = node_coord.y();
                p.z = node_coord.z();
                frontiers.push_back(p);
            }
        }

        // Apply divisive K-Means clustering


        // Only this line in order to correctly, dynamically visualize frontiers (not clustered)
        publishFrontiers2(frontiers);
        // IF these lines are uncommented, no frontiers / clustered frontiers are visualized > for cluster>size < 5!!!!
        std::vector<geometry_msgs::Point> clustered_frontiers = divisiveKMeansClustering(frontiers);
        publishFrontiers(clustered_frontiers);


        // OLD:
        // publishFrontiers(frontiers);
    }




    bool isFrontier(std::shared_ptr<octomap::OcTree> octree, const octomap::point3d& node) {
        static const double neighbor_offsets[4][3] = {
            {resolution, 0, 0},   // Step +1 in X direction
            {-resolution, 0, 0},  // Step -1 in X direction
            {0, resolution, 0},   // Step +1 in Y direction
            {0, -resolution, 0}   // Step -1 in Y direction
        };

        bool has_unknown_neighbor = false;
        bool has_free_neighbor = false;

        for (int i = 0; i < 4; ++i) {  // Loop over only X and Y directions
            const auto& offset = neighbor_offsets[i];
            octomap::point3d neighbor(node.x() + offset[0], node.y() + offset[1], node.z());
            octomap::OcTreeNode* neighbor_node = octree->search(neighbor);

            if (!neighbor_node) {
                has_unknown_neighbor = true;  // This means there's an unknown space nearby
            } else if (octree->isNodeOccupied(neighbor_node)) {
                continue;  // Skip occupied nodes
            } else {
                has_free_neighbor = true;
            }
        }

        return has_unknown_neighbor && has_free_neighbor;  // Only return true if BOTH conditions are met
    }




    // Perform divisive K-Means clustering to reduce the number of frontier points
    std::vector<geometry_msgs::Point> divisiveKMeansClustering(std::vector<geometry_msgs::Point>& points) {
        // if (points.size() <= 1) return points; // No need to cluster if only one or zero points

        std::vector<geometry_msgs::Point> cluster_centers;
        std::vector<std::vector<geometry_msgs::Point>> clusters;
        clusters.push_back(points);

        while (!clusters.empty()) {
            std::vector<geometry_msgs::Point> current_cluster = clusters.back();
            clusters.pop_back();

            // ROS_WARN_STREAM("XXXXXXX  FRONTIER CLUSTER SIZE:" << current_cluster.size());

            if (current_cluster.size() < 100) { // Stop splitting if cluster is small > TODO: change to >= FOV
                geometry_msgs::Point centroid = computeCentroid(current_cluster);
                cluster_centers.push_back(centroid);


                continue;
            }







            std::vector<geometry_msgs::Point> cluster1, cluster2;
            geometry_msgs::Point centroid = computeCentroid(current_cluster);
            // TEST:
            // geometry_msgs::Point centroid = centroid.x = 0, centroid.y = 0, centroid.z = 0;



            // TODO : change to centroid comparison in 3D not just left/right of centroid (Y-direction)
            for (const auto& p : current_cluster) {
                if (p.y < centroid.y) {
                    cluster1.push_back(p);
                } else {
                    cluster2.push_back(p);
                }
            }

            // Split clusters based on 3D euclidean distance from centroid
            // for (const auto& p : current_cluster) {
            //     double distance = sqrt(pow(p.x - centroid.x, 2) + pow(p.y - centroid.y, 2) + pow(p.z - centroid.z, 2));
            //     if (distance < resolution * 25) {  // Distance threshold
            //         cluster1.push_back(p);
            //     } else {
            //         cluster2.push_back(p);
            //     }
            // }

            
            if (!cluster1.empty()) clusters.push_back(cluster1);
            if (!cluster2.empty()) clusters.push_back(cluster2);


            // TEST:
            // geometry_msgs::Point centroid = computeCentroid(current_cluster);
            // cluster_centers.push_back(centroid);

        }
        return cluster_centers;
    }




    // Compute the centroid of a given cluster of points
    geometry_msgs::Point computeCentroid(const std::vector<geometry_msgs::Point>& points) {
        geometry_msgs::Point centroid;
        double sum_x = 0, sum_y = 0, sum_z = 0;
        for (const auto& p : points) {
            sum_x += p.x;
            sum_y += p.y;
            sum_z += p.z;
        }
        centroid.x = sum_x / points.size();
        centroid.y = sum_y / points.size();
        centroid.z = sum_z / points.size();
        return centroid;
    }








    void publishFrontiers(const std::vector<geometry_msgs::Point>& frontiers) {
        visualization_msgs::MarkerArray marker_array;
        visualization_msgs::Marker marker;
        marker.header.frame_id = "world";
        marker.header.stamp = ros::Time::now();
        
        ROS_INFO_STREAM("Publishing frontier markers with frame_id: " << marker.header.frame_id);
        
        marker.ns = "frontiers";
        marker.id = 0;
        marker.type = visualization_msgs::Marker::SPHERE_LIST;
        marker.action = visualization_msgs::Marker::ADD;
        marker.scale.x = marker.scale.y = marker.scale.z = resolution;
        marker.color.a = 1.0;
        marker.color.r = 1.0;
        marker.color.g = 1.0;
        marker.color.b = 0.0;
        
        // set pose to deal with 'unnormalized quaternion' warning
        // marker.pose.orientation.x = 0.0;
        // marker.pose.orientation.y = 0.0;
        // marker.pose.orientation.z = 0.0;
        // marker.pose.orientation.w = 1.0;

        for (const auto& point : frontiers) {
            marker.points.push_back(point);
        }
        marker_array.markers.push_back(marker);
        frontier_pub.publish(marker_array);
    }


    void publishFrontiers2(const std::vector<geometry_msgs::Point>& frontiers) {
        visualization_msgs::MarkerArray marker_array2;
        visualization_msgs::Marker marker2;
        marker2.header.frame_id = "world";
        marker2.header.stamp = ros::Time::now();
        
        ROS_INFO_STREAM("Publishing frontier markers with frame_id: " << marker2.header.frame_id);
        
        marker2.ns = "frontiers2";
        marker2.id = 1;
        marker2.type = visualization_msgs::Marker::SPHERE_LIST;
        marker2.action = visualization_msgs::Marker::ADD;
        marker2.scale.x = marker2.scale.y = marker2.scale.z = resolution;
        marker2.color.a = 1.0;
        marker2.color.r = 1.0;
        marker2.color.g = 0.0;
        marker2.color.b = 1.0;
        
        // set pose to deal with 'unnormalized quaternion' warning
        // marker.pose.orientation.x = 0.0;
        // marker.pose.orientation.y = 0.0;
        // marker.pose.orientation.z = 0.0;
        // marker.pose.orientation.w = 1.0;

        for (const auto& point : frontiers) {
            marker2.points.push_back(point);
        }
        marker_array2.markers.push_back(marker2);
        frontier_pub2.publish(marker_array2);
    }






};

int main(int argc, char** argv) {
    ros::init(argc, argv, "frontier_detector");
    FrontierDetector fd;
    ros::spin();
    return 0;
}
